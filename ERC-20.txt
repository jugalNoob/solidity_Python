 // SPDX-License-Identifier: GPL-3.0


pragma solidity 0.8.6;
abstract contract ERC20Token {
    function name() virtual public view returns (string memory);
    function symbol() virtual public view returns (string memory);
    function decimals() virtual public view returns (uint8);
    function totalSupply() virtual public view returns (uint256);
    function balanceOf(address _owner) virtual public view returns (uint256 balance);
    function transfer(address _to, uint256 _value) virtual public returns (bool success);
    function transferFrom(address _from, address _to, uint256 _value) virtual public returns (bool success);
    function approve(address _spender, uint256 _value) virtual public returns (bool success);
    function allowance(address _owner, address _spender) virtual public view returns (uint256 remaining);

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}


contract Token is ERC20Token{
string  _symbol;
    string  _name;
    uint8  _decimal;
    uint  _totalSupply;
  address  _minter;
        mapping(address => uint) balances;
        mapping(address=>mapping(address => uint256)) allowed;

          constructor (address minter_) {
        _symbol = "Tk";
        _name = "Token";
        _decimal = 0;
        _totalSupply = 100000;
        _minter=minter_;

        balances[_minter] = _totalSupply;
        // emit Transfer(address(0), _minter, _totalSupply);
    }

function name() public view override  returns (string memory){

return _name;

}


function symbol() public view override  returns (string memory){

    return _symbol;

}
function decimals() public view override  returns (uint8){

return _decimal;
}


function totalSupply() public view override  returns (uint256){

return _totalSupply;

}


 function balanceOf(address _owner) public override view returns (uint256 balance) {
        return balances[_owner];
    }

    function transferFrom(address _from, address _to, uint256 _value) public override returns (bool success) {
        require(balances[_from] >= _value);
        balances[_from] -= _value; // balances[_from] = balances[_from] - _value
        balances[_to] += _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

function transfer(address _to, uint256 _value) public override  returns (bool success){
require(balances[msg.sender] >= _value , "insufficient token");
balances[msg.sender]-=_value;
balances[_to]+=_value;
emit Transfer( msg.sender,_to , _value);
return true;
}



    function approve(address _spender, uint256 _value) public override returns (bool success) {
        return true;
    }

    function allowance(address _owner, address _spender) public override view returns (uint256 remaining) {
        
return allowed[_owner][_spender];
    }

    function mint(uint amount) public returns (bool) {
        require(msg.sender == _minter);
        balances[_minter] += amount;
        _totalSupply += amount;
        return true;
    }



}

/////////////////////////khjdfsvhkufvdjgjtdf///////////////////////

 // SPDX-License-Identifier: GPL-3.0


pragma solidity 0.8.6;
abstract contract ERC20Token {
    function name() virtual public view returns (string memory);
    function symbol() virtual public view returns (string memory);
    function decimals() virtual public view returns (uint8);
    function totalSupply() virtual public view returns (uint256);
    function balanceOf(address _owner) virtual public view returns (uint256 balance);
    function transfer(address _to, uint256 _value) virtual public returns (bool success);
    function transferFrom(address _from, address _to, uint256 _value) virtual public returns (bool success);
    function approve(address _spender, uint256 _value) virtual public returns (bool success);
    function allowance(address _owner, address _spender) virtual public view returns (uint256 remaining);

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}


contract Token is ERC20Token{
string  _symbol;
    string  _name;
    uint8  _decimal;
    uint  _totalSupply;
  address  _minter;
        mapping(address => uint) balances;
        mapping(address=>mapping(address => uint256)) allowed;

          constructor (address minter_) {
        _symbol = "Tk";
        _name = "Token";
        _decimal = 0;
        _totalSupply = 100000;
        _minter=minter_;

        balances[_minter] = _totalSupply;
        // emit Transfer(address(0), _minter, _totalSupply);
    }

function name() public view override  returns (string memory){

return _name;

}


function symbol() public view override  returns (string memory){

    return _symbol;

}
function decimals() public view override  returns (uint8){

return _decimal;
}


function totalSupply() public view override  returns (uint256){

return _totalSupply;

}


 function balanceOf(address _owner) public override view returns (uint256 balance) {
        return balances[_owner];
    }

    function transferFrom(address _from, address _to, uint256 _value) public override returns (bool success) {
        require(balances[_from] >= _value);
        balances[_from] -= _value; // balances[_from] = balances[_from] - _value
        balances[_to] += _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

function transfer(address _to, uint256 _value) public override  returns (bool success){
require(balances[msg.sender] >= _value , "insufficient token");
balances[msg.sender]-=_value;
balances[_to]+=_value;
emit Transfer( msg.sender,_to , _value);
return true;
}



    function approve(address _spender, uint256 _value) public override returns (bool success) {
        return true;
    }

    function allowance(address _owner, address _spender) public override view returns (uint256 remaining) {
        
return allowed[_owner][_spender];
    }

    function mint(uint amount) public returns (bool) {
        require(msg.sender == _minter);
        balances[_minter] += amount;
        _totalSupply += amount;
        return true;
    }



}


